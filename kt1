# 6 Реализуйте программу-викторину, в которой пользователь может отвечать на вопросы по различным темам. Создайте список вопросов и ответов, затем используйте циклы и условные операторы для проверки правильности ответа.
"""
def quiz():
    questions = {
        "Как называется столица Франции?": "Париж",
        "Сколько планет в Солнечной системе?": "Восемь",
        "Как называется жидкость, заполняющая глазное яблоко?": "Слеза",
        "Помидор это овощ или ягода?": "Ягода"
    }

    score = 0

    print("Добро пожаловать в викторину! Ответьте на следующие вопросы:\n")

    for question, correct_answer in questions.items():
        user_answer = input(question + " ")
        if user_answer.lower() == correct_answer.lower():
            print("Правильно!")
            score += 1
        else:
            print(f"Неправильно. Правильный ответ: {correct_answer}.\n")
    print(f"\nВы ответили правильно на {score} из {len(questions)} вопросов.")

quiz()
"""

# 7 В настольной игре Скрабл (Scrabble) каждая буква имеет определенную ценность. В случае с английским алфавитом очки распределяются так, как в словаре ниже. Напишите программу, которая вычисляет стоимость введенного пользователем слова. Будем считать, что на вход подается только одно слово, которое содержит либо только английские буквы.
"""
def Scrabble(word):
    points = {
        1: 'AEIOULNSTR',
        2: 'DG',
        3: 'BCMP',
        4: 'FHVWY',
        5: 'K',
        8: 'JZ',
        10: 'QX'
    }
    
    score_map = {}
    for score, letters in points.items():
        for letter in letters:
            score_map[letter] = score

    total_score = 0
    for letter in word.upper():  
        if letter in score_map:
            total_score += score_map[letter]

    return total_score

user_word = input("Введите слово: ")
word_score = Scrabble(user_word)
print(f"Стоимость слова '{user_word}': {word_score} очков.")
"""

# 8 Напишите программу, которая будет создавать список из двух по следующему примеру: [1, 2, 3] (+) [11, 22, 33] -> [1, 11, 2, 22, 3, 33]
"""
def merge_lists(list1, list2):
    merged_list = []
    min_length = min(len(list1), len(list2))
    
    for i in range(min_length):
        merged_list.append(list1[i])
        merged_list.append(list2[i])
    
    if len(list1) > min_length:
        merged_list.extend(list1[min_length:]) # extend добавляет все выделенные элементы в конец массива
    elif len(list2) > min_length:
        merged_list.extend(list2[min_length:])

    return merged_list

list1 = [1, 2, 3]
list2 = [11, 22, 33]
result = merge_lists(list1, list2)
print(result) 
"""

# 9 Задание 9. Пользвоатель вводит 2 числа - индексы списка. Выведите список, который не содержит элементов по этим индексам.Дан список: [1, 44, 7, 9, 3, 2, 1, 44]Ввод: 0, 4Результат: [44, 7, 9, 2, 1, 44]
"""
def removeElByIndex(original_list, index1, index2):
    indexes = sorted([index1, index2], reverse=True)
    
    for index in indexes:
        del original_list[index]
    
    return original_list

# Исходный список
my_list = [1, 44, 7, 9, 3, 2, 1, 44]

input_index = input("Введите два индекса, разделенные запятой: ")
index1, index2 = map(int, input_index.split(','))
result_list = removeElByIndex(my_list, index1, index2)
print("Результат:", result_list)
"""

# 10 Пользователь вводит число. Вывести количество нулей в конце числа.18534290000 -> 3 ??????????? 6532036235001 -> 0 15 -> 0
"""
def Zeros(number):
    number_str = str(number)
    
    count = 0
    for digit in reversed(number_str): #reversed переворачивает массив 
        if digit == '0':
            count += 1
        else:
            break

    return count

# Запрашиваем ввод числа у пользователя
user_input = input("Введите число: ")
result = Zeros(user_input)

print("Количество нулей в конце числа:", result)
"""

# 11 Дан список. Пользователь вводит число. Вывести ближайшее число к введенному из списка[17, 4, 7, 10, 11, 12], 9 == 10 [17, 4, 7, 10, 11, 12], 8 == 7
"""
def Nearest_Number(arr, target):
    target = int(target)
    nearest = arr[0]
    min_diff = abs(nearest - target) 

    for i in arr:
        diff = abs(i - target)
        if diff < min_diff: 
            min_diff = diff
            nearest = i 
            
    return nearest

arr = [17, 4, 7, 10, 11, 12]
user_inp = input("Введите число: ")
print(Nearest_Number(arr, user_inp))
"""

# 12 Пользователем вводится строка, а затем 2 символа - ограничения. Напечатать в консоль строку, которая находтся между ограничений."What is >apple<", ">", "<" == "apple""[an apple]", "[", "]" == "an apple"
"""
str = input("Введите строку: ")
limitation1 = input("Введите первое ограничение: ")
limitation2 = input("Введите второе ограничение: ")

start_index = str.index(limitation1)
end_index = str.index(limitation2)

print(str[start_index + 1 : end_index])
"""
